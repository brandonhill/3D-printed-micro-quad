
include <../BH-Lib/all.scad>;

PRINT_LAYER = 0.2;
PRINT_NOZZLE = 0.5;

TOLERANCE_CLOSE = 0.2;
TOLERANCE_FIT = 0.25;
TOLERANCE_CLEAR = 0.3;

/******************************************************************************
 * MAIN
 */

BOOM_ANGLE = 35;

CAM_ANGLE = 25;
CAM_CLIP_THICKNESS = 1;
CAM_CLIP_WIDTH = 3;
CAM_MOUNT_HEIGHT = 5;
CAM_MOUNT_SCREW_DIM = SCREW_M2_SOCKET_DIM;
CAM_MOUNT_SCREW_PITCH = THREAD_PITCH_M2_COARSE;
CAM_MOUNT_SCREW_SURROUND = 1;

CANOPY_THICKNESS = 0.4;

COMPONENT_CLEARANCE = 1;

FRAME_BASE_THICKNESS = print_height(0.4);
FRAME_FLANGE_THICKNESS = print_height(1);
FRAME_FLANGE_WIDTH = 1;
FRAME_HEIGHT = print_height(3);
FRAME_INSET_FACTOR = 0.05; // allows curvature of prop guards
FRAME_WALLS = 0.8;

SMOOTHING_COARSE = 25;
SMOOTHING_FINE = 2;

PROP_CLEARANCE = 2;
PROP_GUARDS = true;
PROP_RAD = 56 / 2;

SIZE_DIA = 100;

/******************************************************************************
 * COMPONENTS
 */

BATT_DIM_3100 = [68, 19, 19];
BATT_WGT_3100 = 46.3;

BATT_DIM = BATT_DIM_3100;
BATT_STRAP_DIM = [15.5, 1.5];
BATT_WEIGHT = BATT_WGT_3100;
BATT_WIRE_RAD = wire_rad(18);

CAM_FOV = 120;
CAM_DIM = CAM_CMOS_MICRO_DIM;
CAM_RAD = CAM_CMOS_MICRO_RAD;
CAM_PIVOT_OFFSET = CAM_DIM[2] / 2;

ESC_DIM = ESC_TEENY_6A_4IN1_DIM;
ESC_BOARD_DIM = ESC_TEENY_6A_4IN1_BOARD_DIM;

FC_BOARD_DIM = FC_TEENY_F4_BOARD_DIM;
FC_DIM = FC_TEENY_F4_DIM;
FC_HOLE_SPACING = FC_TEENY_F4_HOLE_SPACING;
FC_SCREW_DIM = SCREW_M2_SOCKET_DIM;
FC_SCREW_PITCH = THREAD_PITCH_M2_COARSE;
FC_SCREW_SURROUND = 0.6;

MOTOR_AXLE_RAD = 3.5 / 2;
MOTOR_MOUNT_ARM_THICKNESS = MOTOR_SUNNYSKY_0705_MOUNT_THICKNESS;
MOTOR_MOUNT_ARM_WIDTH = MOTOR_SUNNYSKY_0705_MOUNT_ARM_WIDTH;
MOTOR_MOUNT_RAD = MOTOR_SUNNYSKY_0705_MOUNT_RAD;
MOTOR_RAD = MOTOR_SUNNYSKY_0705_RAD;
MOTOR_SCREW_DIM = SCREW_M1_6_PAN_DIM;
MOTOR_SCREW_LENGTH = 3;
MOTOR_WIRES_RAD = 1.5;

RX_DIM = [15.5, 10.2, 3.5];

VTX_DIM = VTX_VTX03_DIM;

/******************************************************************************
 * SETUP (order is important)
 */

SIZE = [
	sin(BOOM_ANGLE) * SIZE_DIA,
	cos(BOOM_ANGLE) * SIZE_DIA
];
SIZE_OUTER = [
	SIZE[0] + (PROP_RAD + PROP_CLEARANCE + FRAME_WALLS + FRAME_FLANGE_WIDTH) * 2,
	SIZE[1] + (PROP_RAD + PROP_CLEARANCE + FRAME_WALLS + FRAME_FLANGE_WIDTH) * 2];

ESC_POS = [5, 0, FRAME_BASE_THICKNESS + 2];
ESC_ROT = [];

FC_POS = [
	ESC_POS[0],
	ESC_POS[1],
	ESC_POS[2] + ESC_DIM[2] / 2 + COMPONENT_CLEARANCE + FC_DIM[2] / 2];
FC_ROT = [];

MOTOR_MOUNT_THICKNESS = print_height(MOTOR_SCREW_LENGTH - MOTOR_MOUNT_ARM_THICKNESS);

MOTOR_POS = let(h = SIZE_DIA / 2)
	[sin(BOOM_ANGLE) * h,
	cos(BOOM_ANGLE) * h,
	MOTOR_MOUNT_THICKNESS];
MOTOR_ROT = [];

CAM_CLIP_RAD = CAM_RAD[0];
CAM_CUTOUT_RAD = CAM_RAD[len(CAM_RAD) - 1] + 0.5;
CAM_MOUNT_POS = [
	ESC_POS[0] + ESC_DIM[0] / 2 + 12,
	0,
	FRAME_FLANGE_THICKNESS];
CAM_ROT = [0, -CAM_ANGLE];

PROP_POS = [MOTOR_POS[0], MOTOR_POS[1], MOTOR_POS[2] + 11.75];
PROP_ROT = [];

VTX_POS = [
	FC_POS[0] - (ESC_DIM[0] / 2 + COMPONENT_CLEARANCE * 2 + VTX_DIM[1] / 2),
	0,
	CANOPY_THICKNESS + COMPONENT_CLEARANCE + VTX_DIM[2] / 2];
VTX_ROT = [0, 0, -90];

RX_POS = [
	VTX_POS[0] + VTX_DIM[1] / 2 - RX_DIM[0] / 2,
	-VTX_DIM[0] / 2 + RX_DIM[1] / 2,
	VTX_POS[2] + VTX_DIM[2] / 2 + COMPONENT_CLEARANCE + RX_DIM[2] / 2];
RX_ROT = [];

// CG

BATT_STRAP_WEIGHT = 1.2;
CAM_WEIGHT = 1.5;
ESC_WEIGHT = 2.5;
FC_WEIGHT = 2.5;
MOTOR_WEIGHT = 3;
PROP_WEIGHT = 0.3;
RX_WEIGHT = 1;
VTX_WEIGHT = 2; // inc. dipole antenna

WEIGHT =
	BATT_WEIGHT +
	BATT_STRAP_WEIGHT +
	CAM_WEIGHT +
	ESC_WEIGHT + // 4 in 1
	FC_WEIGHT +
	MOTOR_WEIGHT * 4 +
	PROP_WEIGHT * 4 +
	RX_WEIGHT +
	VTX_WEIGHT
	;


// NOT WORKING! TODO: fix
//@recursive
function move_batt_until_cg_near_centre(batt_pos, tolerance = 1) =
	let(
		curr_cg = cg(batt_pos),
		offset = abs(curr_cg[0]))
	offset > tolerance ?
// 	offset > tolerance && curr_cg[0] < BATT_POS_MAX[0] ?
		move_batt_until_cg_near_centre([
			batt_pos[0] + max(0, offset) * sign(offset),
			batt_pos[1],
			batt_pos[2]],
			tolerance)
		:
		batt_pos;


function cg(batt_pos) = (
	batt_pos * (BATT_WEIGHT + BATT_STRAP_WEIGHT) +
	CAM_MOUNT_POS * CAM_WEIGHT +

// 	[ ESC_POS[0],  ESC_POS[1], ESC_POS[2]] * ESC_WEIGHT +
// 	[-ESC_POS[0],  ESC_POS[1], ESC_POS[2]] * ESC_WEIGHT +
// 	[ ESC_POS[0], -ESC_POS[1], ESC_POS[2]] * ESC_WEIGHT +
// 	[-ESC_POS[0], -ESC_POS[1], ESC_POS[2]] * ESC_WEIGHT +

	ESC_POS * ESC_WEIGHT + // 4 in 1
	FC_POS * FC_WEIGHT +

	[ MOTOR_POS[0],  MOTOR_POS[1], MOTOR_POS[2]] * MOTOR_WEIGHT +
	[-MOTOR_POS[0],  MOTOR_POS[1], MOTOR_POS[2]] * MOTOR_WEIGHT +
	[ MOTOR_POS[0], -MOTOR_POS[1], MOTOR_POS[2]] * MOTOR_WEIGHT +
	[-MOTOR_POS[0], -MOTOR_POS[1], MOTOR_POS[2]] * MOTOR_WEIGHT +

	[ PROP_POS[0],  PROP_POS[1], PROP_POS[2]] * PROP_WEIGHT +
	[-PROP_POS[0],  PROP_POS[1], PROP_POS[2]] * PROP_WEIGHT +
	[ PROP_POS[0], -PROP_POS[1], PROP_POS[2]] * PROP_WEIGHT +
	[-PROP_POS[0], -PROP_POS[1], PROP_POS[2]] * PROP_WEIGHT +

	RX_POS * RX_WEIGHT +
	VTX_POS * VTX_WEIGHT
	) / WEIGHT;

BATT_POS_INITIAL = [-6, 0, ESC_POS[2] + ESC_BOARD_DIM[2] +
ESC_DIM[2] / 2 + BATT_STRAP_DIM[1] + BATT_DIM[2] / 2];
// BATT_POS = move_batt_until_cg_near_centre(BATT_POS_INITIAL);

BATT_POS = BATT_POS_INITIAL;
BATTERY_ROT = [90, 0];

CG = cg(BATT_POS);
